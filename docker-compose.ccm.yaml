version: "3.9"

x-common: &common
  restart: unless-stopped
  logging:
    driver: journald

x-app: &app
  image: "ghcr.io/ccmbioinfo/stager:${ST_VERSION}"
  user: www-data
  command: --preload --workers ${GUNICORN_WORKERS:-1}
  healthcheck:
    test: ["CMD", "./healthcheck.py"]
  <<: *common

x-env: &env
  SQLALCHEMY_SIDECAR: /var/log/stager/sqlalchemy.fifo
  MINIO_REGION_NAME: hpc4health
  MINIO_TLS: "true"
  MSTEAMS_WEBHOOK_URL:

x-sidecar: &sidecar
  image: busybox
  init: true
  command: tail -f -n +1 /var/log/stager/sqlalchemy.fifo
  <<: *common

services:
  app-hiraki:
    <<: *app
    environment:
      <<: *env
      ST_SECRET_KEY: "${HIRAKI_ST_SECRET_KEY}"
      ST_DATABASE_URI: "mysql+pymysql://${HIRAKI_MYSQL_CONNECTION_STRING}"
      MINIO_ENDPOINT: "${HIRAKI_MINIO_ENDPOINT}"
      MINIO_ACCESS_KEY: "${HIRAKI_MINIO_ACCESS_KEY}"
      MINIO_SECRET_KEY: "${HIRAKI_MINIO_SECRET_KEY}"
    labels:
      traefik.enable: true
      # Routing for the main application server
      traefik.http.routers.app-hiraki.rule: Host(`stager-hiraki.ccm.sickkids.ca`) # && PathPrefix(`/api`)
      traefik.http.routers.app-hiraki.entrypoints: https
      traefik.http.routers.app-hiraki.middlewares: app,security@file
      traefik.http.routers.app-hiraki.service: app-hiraki
      traefik.http.services.app-hiraki.loadbalancer.server.port: 5000
      # Routing for the Prometheus metrics endpoint
      traefik.http.routers.metrics-hiraki.rule: Host(`stager-hiraki.ccm.sickkids.ca`) # && PathPrefix(`/metrics`)
      traefik.http.routers.metrics-hiraki.entrypoints: traefik
      traefik.http.routers.metrics-hiraki.middlewares: security@file
      traefik.http.routers.metrics-hiraki.service: metrics-hiraki
      traefik.http.services.metrics-hiraki.loadbalancer.server.port: 8080
      # Shared CORS middleware between services
      traefik.http.middlewares.app.headers.accessControlAllowOriginList: https://stager.ccm.sickkids.ca
      traefik.http.middlewares.app.headers.accessControlAllowMethods: GET,HEAD,POST,PUT,DELETE,OPTIONS,PATCH
      traefik.http.middlewares.app.headers.accessControlAllowHeaders: Accept,Content-Type
      traefik.http.middlewares.app.headers.accessControlAllowCredentials: true
    volumes:
      - log-hiraki:/var/log/stager
  sidecar-sqlalchemy-hiraki:
    <<: *sidecar
    volumes:
      - log-hiraki:/var/log/stager:ro
    depends_on:
      - app-hiraki
  app-muise:
    <<: *app
    environment:
      <<: *env
      ST_SECRET_KEY: "${MUISE_ST_SECRET_KEY}"
      ST_DATABASE_URI: "mysql+pymysql://${MUISE_MYSQL_CONNECTION_STRING}"
      MINIO_ENDPOINT: "${MUISE_MINIO_ENDPOINT}"
      MINIO_ACCESS_KEY: "${MUISE_MINIO_ACCESS_KEY}"
      MINIO_SECRET_KEY: "${MUISE_MINIO_SECRET_KEY}"
    labels:
      traefik.enable: true
      # Routing for the main application server
      traefik.http.routers.app-muise.rule: Host(`stager-muise.ccm.sickkids.ca`) # && PathPrefix(`/api`)
      traefik.http.routers.app-muise.entrypoints: https
      traefik.http.routers.app-muise.middlewares: app,security@file
      traefik.http.routers.app-muise.service: app-muise
      traefik.http.services.app-muise.loadbalancer.server.port: 5000
      # Routing for the Prometheus metrics endpoint
      traefik.http.routers.metrics-muise.rule: Host(`stager-muise.ccm.sickkids.ca`) # && PathPrefix(`/metrics`)
      traefik.http.routers.metrics-muise.entrypoints: traefik
      traefik.http.routers.metrics-muise.middlewares: security@file
      traefik.http.routers.metrics-muise.service: metrics-muise
      traefik.http.services.metrics-muise.loadbalancer.server.port: 8080
  sidecar-sqlalchemy-muise:
    <<: *sidecar
    volumes:
      - log-muise:/var/log/stager:ro
    depends_on:
      - app-muise
  # app-hawkins:
  #   <<: *app
  #   environment:
  #     <<: *env
  #     ST_SECRET_KEY: "${HAWKINS_ST_SECRET_KEY}"
  #     ST_DATABASE_URI: "mysql+pymysql://${HAWKINS_MYSQL_CONNECTION_STRING}"
  #     MINIO_ENDPOINT: "${HAWKINS_MINIO_ENDPOINT}"
  #     MINIO_ACCESS_KEY: "${HAWKINS_MINIO_ACCESS_KEY}"
  #     MINIO_SECRET_KEY: "${HAWKINS_MINIO_SECRET_KEY}"
  #   labels:
  #     traefik.enable: true
  #     # Routing for the main application server
  #     traefik.http.routers.app-hawkins.rule: Host(`stager-hawkins.ccm.sickkids.ca`) # && PathPrefix(`/api`)
  #     traefik.http.routers.app-hawkins.entrypoints: https
  #     traefik.http.routers.app-hawkins.middlewares: app,security@file
  #     traefik.http.routers.app-hawkins.service: app-hawkins
  #     traefik.http.services.app-hawkins.loadbalancer.server.port: 5000
  #     # Routing for the Prometheus metrics endpoint
  #     traefik.http.routers.metrics-hawkins.rule: Host(`stager-hawkins.ccm.sickkids.ca`) # && PathPrefix(`/metrics`)
  #     traefik.http.routers.metrics-hawkins.entrypoints: traefik
  #     traefik.http.routers.metrics-hawkins.middlewares: security@file
  #     traefik.http.routers.metrics-hawkins.service: metrics-hawkins
  #     traefik.http.services.metrics-hawkins.loadbalancer.server.port: 8080
  #   sidecar-sqlalchemy-hawkins:
  #     <<: *sidecar
  #     volumes:
  #       - log-hawkins:/var/log/stager:ro
  #     depends_on:
  #       - app-hawkins
  proxy:
    image: traefik:2.6
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - "${PROJECT_ROOT:-.}/traefik:/etc/traefik"
    ports:
      - "80:80"
      - "443:443"
      - "8443:8443" # Traefik and Prometheus endpoint
    command:
      - --api
      - --providers.docker
      - --providers.docker.exposedbydefault=false
      - --providers.file.directory=/etc/traefik
      - --providers.file.watch=false
      - --accesslog
      - --log
      - --metrics.prometheus
      - --metrics.prometheus.manualrouting
      - --global.checknewversion=false
      - --global.sendanonymoususage=false
      - --entrypoints.http.address=:80
      - --entrypoints.http.http.redirections.entrypoint.to=https
      - --entrypoints.https.address=:443
      - --entrypoints.https.http.tls
      - --entrypoints.traefik.address=:8443
      - --entrypoints.traefik.http.tls
    <<: *common
volumes:
  log-hiraki:
  log-muise:
  # log-hawkins:
