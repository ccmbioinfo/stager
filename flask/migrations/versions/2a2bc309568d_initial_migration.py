"""Initial migration.

Revision ID: 2a2bc309568d
Revises:
Create Date: 2021-03-25 21:31:27.469232

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = "2a2bc309568d"
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "dataset_type",
        sa.Column("dataset_type", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("dataset_type"),
    )
    op.create_table(
        "group",
        sa.Column("group_id", sa.Integer(), nullable=False),
        sa.Column("group_code", sa.String(length=50), nullable=False),
        sa.Column("group_name", sa.String(length=250), nullable=False),
        sa.PrimaryKeyConstraint("group_id"),
        sa.UniqueConstraint("group_code"),
        sa.UniqueConstraint("group_name"),
    )
    op.create_table(
        "institution",
        sa.Column("institution_id", sa.Integer(), nullable=False),
        sa.Column("institution", sa.String(length=100), nullable=False),
        sa.PrimaryKeyConstraint("institution_id"),
        sa.UniqueConstraint("institution", "institution"),
    )
    op.create_table(
        "metadataset_type",
        sa.Column("metadataset_type", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("metadataset_type"),
    )
    op.create_table(
        "pipeline",
        sa.Column("pipeline_id", sa.Integer(), nullable=False),
        sa.Column("pipeline_name", sa.String(length=50), nullable=False),
        sa.Column("pipeline_version", sa.String(length=50), nullable=False),
        sa.PrimaryKeyConstraint("pipeline_id"),
        sa.UniqueConstraint("pipeline_name", "pipeline_version"),
    )
    op.create_table(
        "user",
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.Column("username", sa.String(length=30), nullable=False),
        sa.Column("password_hash", sa.String(length=200), nullable=False),
        sa.Column("email", sa.String(length=150), nullable=False),
        sa.Column("is_admin", sa.Boolean(), nullable=True),
        sa.Column("last_login", sa.DateTime(), nullable=True),
        sa.Column("deactivated", sa.Boolean(), nullable=False),
        sa.Column("minio_access_key", sa.String(length=150), nullable=True),
        sa.Column("minio_secret_key", sa.String(length=150), nullable=True),
        sa.PrimaryKeyConstraint("user_id"),
        sa.UniqueConstraint("email"),
        sa.UniqueConstraint("username"),
    )
    op.create_table(
        "analysis",
        sa.Column("analysis_id", sa.Integer(), nullable=False),
        sa.Column(
            "analysis_state",
            sa.Enum(
                "Requested",
                "Running",
                "Done",
                "Error",
                "Cancelled",
                name="analysisstate",
            ),
            nullable=False,
        ),
        sa.Column("pipeline_id", sa.Integer(), nullable=False),
        sa.Column("qsub_id", sa.Integer(), nullable=True),
        sa.Column("result_path", sa.String(length=500), nullable=True),
        sa.Column("assignee_id", sa.Integer(), nullable=True),
        sa.Column("requester_id", sa.Integer(), nullable=False),
        sa.Column("requested", sa.DateTime(), nullable=False),
        sa.Column("started", sa.DateTime(), nullable=True),
        sa.Column("finished", sa.DateTime(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.Column(
            "priority",
            sa.Enum("Clinical", "Research", name="prioritytype"),
            nullable=True,
        ),
        sa.ForeignKeyConstraint(["assignee_id"], ["user.user_id"], onupdate="cascade"),
        sa.ForeignKeyConstraint(
            ["pipeline_id"],
            ["pipeline.pipeline_id"],
            onupdate="cascade",
            ondelete="restrict",
        ),
        sa.ForeignKeyConstraint(["requester_id"], ["user.user_id"], onupdate="cascade"),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["user.user_id"], onupdate="cascade"
        ),
        sa.PrimaryKeyConstraint("analysis_id"),
    )
    op.create_table(
        "family",
        sa.Column("family_id", sa.Integer(), nullable=False),
        sa.Column("family_codename", sa.String(length=50), nullable=False),
        sa.Column("family_aliases", sa.String(length=100), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"], ["user.user_id"], onupdate="cascade"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["user.user_id"], onupdate="cascade"
        ),
        sa.PrimaryKeyConstraint("family_id"),
        sa.UniqueConstraint("family_codename"),
    )
    op.create_table(
        "metadataset_type_dataset_type",
        sa.Column("dataset_type", sa.String(length=50), nullable=False),
        sa.Column("metadataset_type", sa.String(length=50), nullable=False),
        sa.ForeignKeyConstraint(
            ["dataset_type"],
            ["dataset_type.dataset_type"],
        ),
        sa.ForeignKeyConstraint(
            ["metadataset_type"],
            ["metadataset_type.metadataset_type"],
        ),
        sa.PrimaryKeyConstraint("dataset_type", "metadataset_type"),
        sa.UniqueConstraint("dataset_type"),
    )
    op.create_table(
        "pipeline_datasets",
        sa.Column("pipeline_id", sa.Integer(), nullable=False),
        sa.Column("supported_metadataset_type", sa.String(length=50), nullable=False),
        sa.ForeignKeyConstraint(
            ["pipeline_id"],
            ["pipeline.pipeline_id"],
            onupdate="cascade",
            ondelete="restrict",
        ),
        sa.ForeignKeyConstraint(
            ["supported_metadataset_type"],
            ["metadataset_type.metadataset_type"],
        ),
        sa.PrimaryKeyConstraint("pipeline_id", "supported_metadataset_type"),
    )
    op.create_table(
        "users_groups",
        sa.Column("user_id", sa.Integer(), nullable=True),
        sa.Column("group_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.group_id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["user.user_id"],
        ),
    )
    op.create_table(
        "participant",
        sa.Column("participant_id", sa.Integer(), nullable=False),
        sa.Column("family_id", sa.Integer(), nullable=False),
        sa.Column("participant_codename", sa.String(length=50), nullable=False),
        sa.Column("participant_aliases", sa.String(length=100), nullable=True),
        sa.Column(
            "sex",
            sa.Enum("Male", "Female", "Unknown", "Other", name="sex"),
            nullable=True,
        ),
        sa.Column(
            "participant_type",
            sa.Enum("Proband", "Parent", "Sibling", "Other", name="participanttype"),
            nullable=True,
        ),
        sa.Column("month_of_birth", sa.Date(), nullable=True),
        sa.Column("institution_id", sa.Integer(), nullable=True),
        sa.Column("affected", sa.Boolean(), nullable=True),
        sa.Column("solved", sa.Boolean(), nullable=True),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"], ["user.user_id"], onupdate="cascade"
        ),
        sa.ForeignKeyConstraint(
            ["family_id"],
            ["family.family_id"],
        ),
        sa.ForeignKeyConstraint(
            ["institution_id"], ["institution.institution_id"], onupdate="cascade"
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["user.user_id"], onupdate="cascade"
        ),
        sa.PrimaryKeyConstraint("participant_id"),
        sa.UniqueConstraint("participant_codename"),
    )
    op.create_table(
        "tissue_sample",
        sa.Column("tissue_sample_id", sa.Integer(), nullable=False),
        sa.Column("participant_id", sa.Integer(), nullable=False),
        sa.Column("extraction_date", sa.Date(), nullable=True),
        sa.Column(
            "tissue_sample_type",
            sa.Enum(
                "Blood",
                "Saliva",
                "Lymphocyte",
                "Fibroblast",
                "Muscle",
                "Skin",
                "Urine",
                "Plasma",
                "Unknown",
                "Kidney",
                name="tissuesampletype",
            ),
            nullable=False,
        ),
        sa.Column(
            "tissue_processing",
            sa.Enum("FreshFrozen", "Formaldehyde", name="tissueprocessing"),
            nullable=True,
        ),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=False),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["created_by_id"], ["user.user_id"], onupdate="cascade"
        ),
        sa.ForeignKeyConstraint(
            ["participant_id"],
            ["participant.participant_id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["user.user_id"], onupdate="cascade"
        ),
        sa.PrimaryKeyConstraint("tissue_sample_id"),
    )
    op.create_table(
        "dataset",
        sa.Column("tissue_sample_id", sa.Integer(), nullable=False),
        sa.Column("dataset_id", sa.Integer(), nullable=False),
        sa.Column("dataset_type", sa.String(length=50), nullable=False),
        sa.Column("notes", sa.Text(), nullable=True),
        sa.Column(
            "condition",
            sa.Enum("Control", "GermLine", "Somatic", name="datasetcondition"),
            nullable=False,
        ),
        sa.Column(
            "extraction_protocol",
            sa.String(length=100),
            nullable=True,
        ),
        sa.Column("capture_kit", sa.String(length=50), nullable=True),
        sa.Column("library_prep_method", sa.String(length=50), nullable=True),
        sa.Column("library_prep_date", sa.Date(), nullable=True),
        sa.Column("read_length", sa.Integer(), nullable=True),
        sa.Column(
            "read_type",
            sa.Enum("PairedEnd", "SingleEnd", name="datasetreadtype"),
            nullable=True,
        ),
        sa.Column("sequencing_id", sa.String(length=50), nullable=True),
        sa.Column("sequencing_date", sa.Date(), nullable=True),
        sa.Column("sequencing_centre", sa.String(length=100), nullable=True),
        sa.Column("batch_id", sa.String(length=50), nullable=True),
        sa.Column("created", sa.DateTime(), nullable=True),
        sa.Column("created_by_id", sa.Integer(), nullable=False),
        sa.Column("updated", sa.DateTime(), nullable=False),
        sa.Column("updated_by_id", sa.Integer(), nullable=False),
        sa.Column("discriminator", sa.Enum("dataset", "rnaseq_dataset"), nullable=True),
        sa.ForeignKeyConstraint(
            ["created_by_id"], ["user.user_id"], onupdate="cascade"
        ),
        sa.ForeignKeyConstraint(
            ["dataset_type"],
            ["dataset_type.dataset_type"],
        ),
        sa.ForeignKeyConstraint(
            ["tissue_sample_id"],
            ["tissue_sample.tissue_sample_id"],
        ),
        sa.ForeignKeyConstraint(
            ["updated_by_id"], ["user.user_id"], onupdate="cascade"
        ),
        sa.PrimaryKeyConstraint("dataset_id"),
    )
    op.create_table(
        "dataset_file",
        sa.Column("file_id", sa.Integer(), nullable=False),
        sa.Column("dataset_id", sa.Integer(), nullable=False),
        sa.Column("path", sa.String(length=500), nullable=False),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset.dataset_id"],
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("file_id"),
        sa.UniqueConstraint("path"),
    )
    op.create_table(
        "datasets_analyses",
        sa.Column("dataset_id", sa.Integer(), nullable=True),
        sa.Column("analysis_id", sa.Integer(), nullable=True),
        sa.PrimaryKeyConstraint("dataset_id", "analysis_id"),
        sa.ForeignKeyConstraint(
            ["analysis_id"],
            ["analysis.analysis_id"],
        ),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset.dataset_id"],
        ),
    )
    op.create_table(
        "groups_datasets",
        sa.Column("group_id", sa.Integer(), nullable=True),
        sa.Column("dataset_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset.dataset_id"],
        ),
        sa.ForeignKeyConstraint(
            ["group_id"],
            ["group.group_id"],
        ),
    )
    op.create_table(
        "rnaseq_dataset",
        sa.Column("dataset_id", sa.Integer(), nullable=False),
        sa.Column("RIN", sa.Float(), nullable=True),
        sa.Column("DV200", sa.Integer(), nullable=True),
        sa.Column("concentration", sa.Float(), nullable=True),
        sa.Column("sequencer", sa.String(length=50), nullable=True),
        sa.Column("spike_in", sa.String(length=50), nullable=True),
        sa.ForeignKeyConstraint(
            ["dataset_id"],
            ["dataset.dataset_id"],
            onupdate="cascade",
            ondelete="cascade",
        ),
        sa.PrimaryKeyConstraint("dataset_id"),
    )
    op.execute(
        "ALTER TABLE `group` ADD CHECK (LENGTH(group_code) > 2 AND group_code REGEXP '^[a-z,0-9,-]*$' AND BINARY group_code = LOWER(group_code))"
    )
    op.execute("ALTER TABLE participant ADD CHECK (DAY(month_of_birth) = 1);")
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("rnaseq_dataset")
    op.drop_table("groups_datasets")
    op.drop_table("datasets_analyses")
    op.drop_table("dataset_file")
    op.drop_table("dataset")
    op.drop_table("tissue_sample")
    op.drop_table("participant")
    op.drop_table("users_groups")
    op.drop_table("pipeline_datasets")
    op.drop_table("metadataset_type_dataset_type")
    op.drop_table("family")
    op.drop_table("analysis")
    op.drop_table("user")
    op.drop_table("pipeline")
    op.drop_table("metadataset_type")
    op.drop_table("institution")
    op.drop_table("group")
    op.drop_table("dataset_type")
    # ### end Alembic commands ###
