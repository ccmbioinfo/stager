name: Build, test, and deploy backend
on:
  push:
    branches:
      - master
    paths:
      - .github/workflows/flask.yml
      - flask/**/*
      - Dockerfile
      - docker-compose*.yaml
  pull_request:
    branches:
      - '*'
    paths:
      - .github/workflows/flask.yml
      - flask/**/*
      - Dockerfile
      - docker-compose*.yaml
jobs:
  build:
    runs-on: ubuntu-latest
    if: false
    env:
      COMPOSE_FILE: docker-compose.test.yaml
    steps:
      - uses: actions/checkout@v2
      - uses: docker/setup-buildx-action@v1
      - uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Infer metadata (development image)
        uses: docker/metadata-action@v3
        id: meta-dev
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            dev
      - uses: docker/login-action@v1
        if: github.event_name == 'push'
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build development image
        uses: docker/build-push-action@v2
        with:
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta-dev.outputs.tags }}
          labels: ${{ steps.meta-dev.outputs.labels }}
          context: flask
          pull: true
          load: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
      - run: cp sample.env .env
      - name: Pytest
        run: docker-compose run --rm app
      - name: Black
        run: docker-compose run --rm app black --check
      - name: Stop services
        run: docker-compose down
      - name: Infer metadata (production image)
        uses: docker/metadata-action@v3
        if: github.event_name == 'push'
        id: meta-prod
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: latest=${{ github.ref == 'refs/heads/master' }}
          tags: |
            type=ref,event=tag
            type=sha,format=long
      - name: Build production image
        uses: docker/build-push-action@v2
        if: github.event_name == 'push'
        with:
          push: true
          tags: ${{ steps.meta-prod.outputs.tags }}
          labels: ${{ steps.meta-prod.outputs.labels }}
          context: flask
          file: "{context}/../Dockerfile"
          build-args: GIT_SHA=${{ github.sha }}
          pull: true
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache,mode=max
  deploy:
    runs-on: [self-hosted, cheo-ri]
    #needs: build
    #if: github.event_name == 'push'
    environment: CHEO-RI
    concurrency: CHEO-RI
    steps:
      - uses: actions/checkout@v2
      - name: Configure SSH
        if: false
        # https://docs.docker.com/engine/context/working-with-contexts/
        # This avoids passing an -H parameter to every Docker CLI cal
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.DEPLOY_HOST_KEY }}" >> ~/.ssh/known_hosts
          echo "${{ secrets.DEPLOY_PUBLIC_KEY }}" > ~/.ssh/id_rsa.pub
          echo "${{ secrets.DEPLOY_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod -R g-rwx,o-rwx ~/.ssh
          docker context create deploy-target --docker host=ssh://${{ secrets.DEPLOY_USER }}@${{ secrets.DEPLOY_HOST }}
          docker context use deploy-target
      - uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Deploy
        env:
          COMPOSE_FILE: docker-compose.cheo.yaml
          ST_VERSION: latest
          ST_SECRET_KEY: ${{ secrets.ST_SECRET_KEY }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_DATABASE: ${{ secrets.MYSQL_DATABASE }}
          MINIO_ENDPOINT: ${{ secrets.MINIO_ENDPOINT }}
          MINIO_ACCESS_KEY: ${{ secrets.MINIO_ACCESS_KEY }}
          MINIO_SECRET_KEY: ${{ secrets.MINIO_SECRET_KEY }}
        run: |
          docker-compose pull
          docker-compose up
